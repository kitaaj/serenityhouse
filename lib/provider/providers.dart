// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:flutter_riverpod/flutter_riverpod.dart';
// import 'package:mental_health_support/services/cloud/cloud_message.dart';
// import 'package:shared_preferences/shared_preferences.dart';
// import 'package:mental_health_support/services/cloud/firebase_cloud_storage.dart';
// import 'package:mental_health_support/models/gemini_config.dart';
// import 'package:google_generative_ai/google_generative_ai.dart';

// final sharedPreferencesProvider = Provider<SharedPreferences>((ref) {
//   throw UnimplementedError('Override with SharedPreferences instance');
// });

// final currentChatProvider = StateProvider<String?>((ref) => null);

// final chatProvider = StateNotifierProvider<ChatNotifier, List<Message>>((ref) {
//   final sharedPreferences = ref.watch(sharedPreferencesProvider);
//   return ChatNotifier(ref, sharedPreferences);
// });

// class ChatNotifier extends StateNotifier<List<Message>> {
//   final Ref _ref;
//   final SharedPreferences _prefs;
//   final FirebaseCloudStorage _cloudStorage;

//   ChatNotifier(this._ref, this._prefs)
//     : _cloudStorage = FirebaseCloudStorage(),
//       super([]) {
//     Future.microtask(() => _init());
//   }

//   Future<void> _init() async {
//     final user = FirebaseAuth.instance.currentUser;
//     if (user == null) return;
//     // Initialize collections for the current user
//     // This is a placeholder; you need to implement logic to load the last active chat or create a new one
//   }

//   // AI model initialization
//   final GenerativeModel _model = GenerativeModel(
//     model: 'gemini-1.5-flash',
//     apiKey: GeminiConfig.apiKey,
//     safetySettings: _parseSafetySettings(),
//     generationConfig: _parseGenerationConfig(),
//   );

//   static List<SafetySetting> _parseSafetySettings() {
//     return [
//       SafetySetting(HarmCategory.harassment, HarmBlockThreshold.none),
//       SafetySetting(HarmCategory.hateSpeech, HarmBlockThreshold.none),
//       SafetySetting(HarmCategory.sexuallyExplicit, HarmBlockThreshold.none),
//       SafetySetting(HarmCategory.dangerousContent, HarmBlockThreshold.none),
//     ];
//   }

//   static GenerationConfig _parseGenerationConfig() {
//     return GenerationConfig(
//       temperature: 0.7,
//       topK: 40,
//       topP: 0.95,
//       maxOutputTokens: 2048,
//     );
//   }

//   Future<String> getAIResponse(String input) async {
//     final prompt = _buildPrompt(input);
//     final response = await _model.generateContent([Content.text(prompt)]);
//     return response.text ?? "I couldn't generate a response. Please try again.";
//   }

//   String _buildPrompt(String userInput) {
//     final conversationHistory = state
//         .map((m) => "${m.isUser ? 'User' : 'AI'}: ${m.content}")
//         .join('\n');
//     return '''
//     [SYSTEM ROLE]
//     You are a licensed mental health professional specializing in CBT and DBT. 
//     Provide empathetic support while maintaining professional boundaries.
    
//     [CONVERSATION HISTORY]
//     $conversationHistory
    
//     [NEW MESSAGE]
//     User: $userInput
//     AI: 
//     ''';
//   }

//   void addMessage(Message message) async {
//     // Add user message
//     state = [...state, message];
//     await _saveMessage(message);

//     // Get AI response
//     final aiResponse = await getAIResponse(message.content);

//     // Create and save AI message
//     final aiMessage = Message(
//       documentId: '', // Assuming ID is generated by Firestore
//       content: aiResponse,
//       isUser: false,
//       timestamp: DateTime.now(),
//     );
//     state = [...state, aiMessage];
//     await _saveMessage(aiMessage);
//   }

//   Future<void> _saveMessage(Message message) async {
//     final sessionId = _ref.read(currentChatProvider.notifier).state;
//     if (sessionId == null) return;

//     await _cloudStorage.createMessage(
//       content: message.content,
//       isUser: message.isUser,
//       sessionId: sessionId,
//     );

//     await _cloudStorage.updateChatSession(sessionId);
//   }
// }
